#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
from collections import OrderedDict
from contextlib import contextmanager
from os.path import expanduser, basename, dirname, exists
import os, sys, io, stat, struct, types, base64
import tempfile, hashlib, hmac

import yaml
import libnacl
from libnacl.public import SecretKey, Box
from libnacl.utils import rand_nonce


p = lambda fmt,*a,**k:\
	print(*( [fmt.format(*a,**k)]\
		if isinstance(fmt, types.StringTypes) and (a or k)
		else [[fmt] + list(a), k] ), file=sys.stderr)

@contextmanager
def safe_replacement(path, mode=None):
	if mode is None:
		try: mode = stat.S_IMODE(os.lstat(path).st_mode)
		except (OSError, IOError): pass
	kws = dict( delete=False,
		dir=dirname(path), prefix=basename(path)+'.' )
	with tempfile.NamedTemporaryFile(**kws) as tmp:
		try:
			if mode is not None: os.fchmod(tmp.fileno(), mode)
			yield tmp
			if not tmp.closed: tmp.flush()
			os.rename(tmp.name, path)
		finally:
			try: os.unlink(tmp.name)
			except (OSError, IOError): pass

class OrderedDictYAMLLoader(yaml.SafeLoader):
	'Based on: https://gist.github.com/844388'

	def __init__(self, *args, **kwargs):
		super(OrderedDictYAMLLoader, self).__init__(*args, **kwargs)
		self.add_constructor('tag:yaml.org,2002:map', type(self).construct_yaml_map)
		self.add_constructor('tag:yaml.org,2002:omap', type(self).construct_yaml_map)

	def construct_yaml_map(self, node):
		data = OrderedDict()
		yield data
		value = self.construct_mapping(node)
		data.update(value)

	def construct_mapping(self, node, deep=False):
		if isinstance(node, yaml.MappingNode):
			self.flatten_mapping(node)
		else:
			raise yaml.constructor.ConstructorError( None, None,
				'expected a mapping node, but found {}'.format(node.id), node.start_mark )

		mapping = OrderedDict()
		for key_node, value_node in node.value:
			key = self.construct_object(key_node, deep=True) # default is to not recurse into keys
			if isinstance(key, list): key = tuple(key)
			try:
				hash(key)
			except TypeError as exc:
				raise yaml.constructor.ConstructorError( 'while constructing a mapping',
					node.start_mark, 'found unacceptable key ({})'.format(exc), key_node.start_mark )
			value = self.construct_object(value_node, deep=deep)
			mapping[key] = value
		return mapping

yaml.representer.SafeRepresenter.add_representer(
	OrderedDict, yaml.representer.SafeRepresenter.represent_dict )

yaml_load = lambda src,**kws: yaml.load(src, OrderedDictYAMLLoader, **kws)
yaml_dump = lambda data,dst=None,**kws: yaml.safe_dump(
	data, dst, allow_unicode=True, default_flow_style=False, **kws )

b64_encode = base64.urlsafe_b64encode
b64_decode = lambda s:\
	base64.urlsafe_b64decode(s) if '-' in s or '_' in s else s.decode('base64')


class SSHKeyError(Exception): pass

def ssh_key_parse(path):
	# See PROTOCOL.key and sshkey.c in openssh sources

	def key_read_str(src=None):
		if src is None: src = key
		n, = struct.unpack('>I', src.read(4))
		return src.read(n)

	def key_assert(chk, err, *fmt_args, **fmt_kws):
		if fmt_args or fmt_kws: err = err.format(*fmt_args, **fmt_kws)
		err += ' [key file: {!r}, decoded: {!r}]'.format(path, key_str)
		if not chk: raise SSHKeyError(err)

	def key_assert_read(field, val, fixed=False):
		pos, chk = key.tell(), key.read(len(val)) if fixed else key_read_str()
		key_assert( chk == val, 'Failed to match key field'
			' {!r} (offset: {}) - expected {!r} got {!r}', field, pos, val, chk )

	with open(path, 'rb') as src: key = src.read().strip()

	if key.split(None, 1)[0] == 'ssh-ed25519':
		key_str = b64_decode(key.split(None, 2)[1])
		key = io.BytesIO(key_str)
		key_t = key_read_str()
		key_assert(key_t == 'ssh-ed25519', 'Unsupported pubkey type: {!r}', key_t)
		ed2519_pk = key_read_str()
		return dict(pk=ed2519_pk)

	lines, key, done = key.splitlines(), list(), False
	for line in lines:
		if line == '-----END OPENSSH PRIVATE KEY-----': done = True
		if key and not done: key.append(line)
		if line == '-----BEGIN OPENSSH PRIVATE KEY-----':
			if done:
				raise SSHKeyError( 'More than one private'
					' key detected in file, aborting: {!r}'.format(path) )
			assert not key
			key.append('')
	if not done: raise SSHKeyError('Incomplete or missing key in file: {!r}'.format(path))
	key_str = b64_decode(''.join(key))
	key = io.BytesIO(key_str)

	key_assert_read('AUTH_MAGIC', 'openssh-key-v1\0', True)

	line = key_read_str()
	if line != 'none': raise SSHKeyError('Encrypted key (cipher: {})'.format(line))
	key_assert_read('kdfname', 'none')
	key_assert_read('kdfoptions', '')
	(pubkey_count,), pubkeys = struct.unpack('>I', key.read(4)), list()
	for n in xrange(pubkey_count):
		line = key_read_str()
		key_assert(line, 'Empty public key #{}', n)
		line = io.BytesIO(line)
		key_t = key_read_str(line)
		key_assert(key_t == 'ssh-ed25519', 'Unsupported pubkey type: {!r}', key_t)
		ed2519_pk = key_read_str(line)
		line = line.read()
		key_assert(not line, 'Garbage data after pubkey: {!r}', line)
		pubkeys.append(ed2519_pk)
	privkey = io.BytesIO(key_read_str())
	pos, tail = key.tell(), key.read()
	key_assert( not tail,
		'Garbage data after private key (offset: {}): {!r}', pos, tail )

	key = privkey
	n1, n2 = struct.unpack('>II', key.read(8))
	key_assert(n1 == n2, 'checkint values mismatch in private key spec: {!r} != {!r}', n1, n2)
	key_t = key_read_str()
	key_assert(key_t == 'ssh-ed25519', 'Unsupported key type: {!r}', key_t)
	ed2519_pk = key_read_str()
	key_assert(ed2519_pk in pubkeys, 'Pubkey mismatch - {!r} not in {}', ed2519_pk, pubkeys)
	ed2519_sk = key_read_str()
	key_assert(
		len(ed2519_pk) == 32 and len(ed2519_sk) == 64,
		'Key length mismatch: {}/{} != 32/64', len(ed2519_pk), len(ed2519_sk) )
	comment = key_read_str()
	padding = key.read()
	padding, padding_chk = list(bytearray(padding)), range(1, len(padding) + 1)
	key_assert(padding == padding_chk, 'Invalid padding: {} != {}', padding, padding_chk)

	assert ed2519_sk[32:] == ed2519_pk, [ed2519_sk, ed2519_pk]
	key = SecretKey(ed2519_sk[:32])
	return dict(sk=key.sk, pk=key.pk)



class GHGError(Exception): pass

class GHGCrypt(object):

	# See https://github.com/jedisct1/libsodium/issues/141
	#  for a lot of info on streaming encryption using crypto_box primitives.

	enc_magic = '¯\_ʻghgʻ_/¯'
	enc_ver = '1'
	enc_bs = 4 * 2**20 # 4 MiB

	def __init__(self, pk_cache=None):
		self.keys, self.pk_cache = dict(), dict()
		if pk_cache:
			for pkid, key_spec in pk_cache.viewitems():
				if not key_spec: continue
				self.pk_cache['raw-{}'.format(pkid)] = key_spec

	def key_parse_chk(self, key_spec, t=None):
		if not t: t = ['ssh', 'raw64', 'pub64']
		elif isinstance(t, types.StringTypes): t = [bytes(t)]
		return any(key_spec.startswith(k+'-') for k in t)

	def key_parse(self, key_spec):
		if key_spec not in self.keys:
			spec = key_spec.strip().split('-', 1)
			if len(spec) != 2:
				raise GHGError('Invalid key-spec format: {!r}'.format(key_spec))
			t, spec = spec
			if t == 'ssh':
				key = expanduser(spec)
				if os.access(key, os.R_OK): key = ssh_key_parse(key)
				else: key = None
			elif t == 'raw64':
				key_obj = SecretKey(b64_decode(spec))
				key = dict(pk=key_obj.pk, sk=key_obj.sk)
			elif t == 'pub64': key = dict(pk=b64_decode(spec))
			else: key = None
			self.keys[key_spec] = key
		return self.keys[key_spec]

	def key_pkid(self, key_or_pk=None, key_spec=None):
		if not key_or_pk and not key_spec: return
		if key_spec:
			cache_spec_k = 'k-{}'.format(key_spec)
			if cache_spec_k in self.pk_cache:
				return self.pk_cache[cache_spec_k]
			key_or_pk = self.key_parse(key_spec)
		if not key_or_pk: return
		if not isinstance(key_or_pk, types.StringTypes):
			key_or_pk = key_or_pk['pk']
		assert len(key_or_pk) == 32, key_or_pk
		return b64_encode(libnacl.crypto_generichash(key_or_pk)[:6])

	def key_pkid_lookup(self, pkid, key_specs):
		if pkid not in self.pk_cache:
			def update_from_spec(key_spec):
				cache_spec_k = 'k-{}'.format(key_spec)
				if cache_spec_k in self.pk_cache: return
				key = self.key_parse(key_spec)
				if 'sk' not in key:
					self.pk_cache[cache_spec_k] = None
					return
				key_pkid = self.key_pkid(key)
				self.pk_cache.update({key_pkid: key, cache_spec_k: key_pkid})
				return key_pkid
			key_pkid, cache_raw = None, 'raw-{}'.format(pkid)
			if cache_raw in self.pk_cache:
				key_pkid = update_from_spec(self.pk_cache.pop(cache_raw))
			if key_pkid != pkid:
				for key_spec in key_specs:
					key_pkid = update_from_spec(key_spec)
					if key_pkid == pkid: break
				else: self.pk_cache[pkid] = None
		return self.pk_cache[pkid]


	def is_encrypted(self, src_or_line):
		if not isinstance(src_or_line, types.StringTypes):
			src_or_line = src_or_line.peek(len(self.enc_magic) + 1).rstrip()
		magic = src_or_line.strip().split(None, 1)
		return magic and magic[0] == self.enc_magic

	def encrypt(self, src, dst, src_key_spec, dst_key_specs, nonce_base=None):
		assert src_key_spec and dst_key_specs, [src_key_spec, dst_key_specs]
		src_key = self.key_parse(src_key_spec)
		assert src_key, src_key_spec
		if not nonce_base: nonce_base = rand_nonce()[:16]
		sk, head_base = src_key['sk'], '{} {} {} {}'.format(
			self.enc_magic, self.enc_ver,
			b64_encode(src_key['pk']), b64_encode(nonce_base) )

		for dst_key_spec in dst_key_specs:
			key = self.key_parse(dst_key_spec)
			assert key, dst_key_spec
			pk, pkid = key['pk'], self.key_pkid(key)
			assert pkid, dst_key_spec
			dst.write('{} {}\n'.format(head_base, pkid))

			n, pt_sha256 = 0, hashlib.sha256()
			# p( 'enc - nb: {}, pk-src: {}, pk-dst: {}',
			# 	*map(b64_encode, [nonce_base, src_key['pk'], pk]) )
			while True:
				cpt = src.read(self.enc_bs)
				cpt_len, nonce = len(cpt), nonce_base + struct.pack('>Q', n)
				if cpt_len: pt_sha256.update(cpt)
				else: cpt = pt_sha256.digest()
				cct = libnacl.crypto_box(cpt, nonce, pk, sk)
				# p('enc - block: {}, ct: {}', n, b64_encode(cct))
				dst.write(struct.pack('>II', len(cct), cpt_len))
				dst.write(cct)
				if not cpt_len: break
				n += 1

	def decrypt(self, src, dst, key_specs):
		while True:
			head = src.readline().strip()
			if not head: raise GHGError('Failed to find ct for available keys')

			head = head.split()
			assert head[0] == self.enc_magic, head
			head_ver, pk, nonce_base, pkid = int(head[1]),\
				b64_decode(head[2]), b64_decode(head[3]), head[4]
			key = self.key_pkid_lookup(pkid, key_specs)
			if key:
				sk = key['sk']
				key_box, pt_sha256 = Box(sk, pk), hashlib.sha256()

			n, cpt_last = 0, None
			# p( 'dec - nb: {}, pk-src: {}, pk-dst: {}',
			# 	*map(b64_encode, [nonce_base, pk, key and key['pk'] or '']) )
			while True: # read-or-skip loop for chunks
				cct_len, cpt_len = struct.unpack('>II', src.read(8))
				if cpt_last:
					pt_sha256.update(cpt_last)
					dst.write(cpt_last)
					cpt_last = None
				if key:
					cct, nonce = src.read(cct_len), nonce_base + struct.pack('>Q', n)
					# p('dec - block: {}, ct: {}', n, b64_encode(cct))
					cpt_last = libnacl.crypto_box_open(cct, nonce, pk, sk)
					if cpt_len:
						assert cpt_len == len(cpt_last), [cpt_len, len(cpt_last)]
						n += 1
					else:
						pt_sha256_str = pt_sha256.digest()
						assert hmac.compare_digest(pt_sha256_str, cpt_last), [pt_sha256_str, cpt_last]
						return # only clean exit here
				else: src.seek(cct_len, os.SEEK_CUR)

			if key: raise GHGError('Incomplete source data (missing chunks)')



def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='NaCl-based encryption tool.')

	parser.add_argument('path', nargs='?',
		help='File(s) to operate on. Used with --encrypt or --decrypt options.'
			' By default,'
				'--encrypt will write a new file with .ghg suffix, removing the old one,'
				' and --decrypt will remove .ghg suffix and encrypted file, if present.')

	parser.add_argument('-e', '--encrypt', action='store_true',
		help='Encrypt specified file or stdin stream.'
			' Public-key encryption (nacl crypto_box) is used as'
				' "crypto_box(nonce, plaintext, local_sk, recipient_pk)".'
			' Own pubkey is used by default,'
				' use -r/--recipient option to specify pubkey.')
	parser.add_argument('-d', '--decrypt', action='store_true',
		help='Encrypt specified file or stdin stream.'
			' When decrypting to stdout, authentication/integrity is'
				' indicated by exit code (!!!), so ALWAYS CHECK IF EXIT CODE IS 0.')

	parser.add_argument('-r', '--recipient',
		action='append', metavar='key-id',
		help='Public key name/id to encrypt to or decrypt with.'
			' Can be specified multiple times to provide ciphertext for each key.')
	parser.add_argument('-k', '--key', metavar='key-id',
		help='Local secret key name/id to use in encryption.')

	parser.add_argument('-o', '--stdout', action='store_true',
		help='Encrypt/decrypt to stdout, even when file path is specified.')

	parser.add_argument('-s', '--stable', action='store_true',
		help='Derive encryption nonce from hash of the plaintext.'
			' Will fail with large stdin stream, as it requires'
				' two-pass processing (and hence buffering) of data.')

	parser.add_argument('--gen-pkid-cache', action='store_true',
		help='Generate/print YAML "pkid_cache" section contents for all known keys and exit.'
			' Will NOT update ghg.yaml files with these values, only print them to stdout.')

	parser.add_argument('-p', '--pubkey',
		nargs='?', const=True, metavar='key-id',
		help='Print public key for specified key name/id and exit.'
			' With no argument, pubkey for default key will be printed.')
	parser.add_argument('-g', '--genkey', action='store_true',
		help='Generate/print a new secret key and exit.')

	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	if opts.encrypt and opts.decrypt:
		parser.error('Both --encrypt and --decrypt at the same time make no sense.')

	conf, conf_paths = dict(), ['/etc/ghg.yaml', '~/.ghg.yaml']
	for path in filter(exists, map(expanduser, conf_paths)):
		with open(path, 'rb') as src:
			# if stat.S_IRWXO(os.fstat(src).st_mode):
			# 	raise GHGError('Insecure (world-readable) mode for conf-path: {!r}'.format(p))
			c = yaml_load(src)
			for section, c in c.viewitems():
				if c is None:
					conf.pop(section, None)
					continue
				cs = conf[section] = dict()
				for k, v in c.viewitems():
					if v is None: cs.pop(k, None)
					else: cs[k] = v

	stream_buff_len = 10 * 2**20 # 10 MiB
	ghg = GHGCrypt(dict(
		(pkid, conf['keys'].get(k))
		for k, pkid in conf.get('pkid_cache', dict()).viewitems() ))

	if opts.gen_pkid_cache:
		pkid_cache = dict(pkid_cache=OrderedDict(
			(k, ghg.key_pkid(key_spec=v)) for k, v in conf['keys'].viewitems() ))
		print('# Put the following YAML as-is into one of the config files')
		yaml_dump(pkid_cache, sys.stdout)
		return

	if opts.pubkey:
		k = opts.pubkey
		if k is True: k = conf['core']['key']
		print('pub64-{}'.format(b64_encode(ghg.key_parse(conf['keys'][k])['pk'])))
		return

	if opts.genkey:
		print('raw64-{}'.format(b64_encode(libnacl.crypto_box_keypair()[1])))
		return

	@contextmanager
	def crypto_op_src(src_file=None):
		if not src_file: src_file, src_is_stream = io.open(sys.stdin.fileno(), 'rb'), True
		else: src_is_stream = False

		with io.BufferedReader(src_file, stream_buff_len) as src:
			encrypt = not ( ghg.is_encrypted(src)
				if not (opts.encrypt or opts.decrypt) else opts.decrypt )

			if encrypt:
				if opts.stable:
					if src_is_stream:
						buff = src.peek(stream_buff_len)
						if len(buff) >= stream_buff_len:
							raise GHGError( 'Stdin is too large to buffer and process with'
								' --stable option (limit: {:.1f} MiB).'.format(stream_buff_len / float(2**20)) )
						nonce_base = hmac.new(ghg.enc_magic, buff, hashlib.sha256).digest()[:16]
					else:
						pos, buff = src.tell(), ''
						nonce_base = hmac.new(ghg.enc_magic, buff, hashlib.sha256)
						for buff in iter(ft.partial(src_file.read, ghg.enc_bs), ''): nonce_base.update(buff)
						nonce_base = nonce_base.digest()[:16]
						src.seek(pos)
					del buff
				else: nonce_base = None
				src_key_spec = conf['keys'][opts.key or conf['core']['key']]
				dst_key_specs = [conf['keys'][conf['core']['key']]]\
					if not opts.recipient else list(
						(conf['keys'][k] if not ghg.key_parse_chk(k, 'pub64') else k)
						for k in opts.recipient )
				crypto_op_run = lambda dst: ghg.encrypt(
					src, dst, src_key_spec, dst_key_specs, nonce_base )

			else:
				key_specs = [conf['keys'].get(conf['core']['key'])] + conf['keys'].values()
				key_specs = list(OrderedDict.fromkeys(filter(None, key_specs)))
				crypto_op_run = lambda dst: ghg.decrypt(src, dst, key_specs)

			if not src.name: dst_path = None
			elif encrypt: dst_path = '{}.ghg'.format(src.name)
			else: dst_path = src.name[:-4] if src.name.endswith('.ghg') else src.name
			yield (crypto_op_run, dst_path)

	if opts.path:
		src = io.open(opts.path, 'rb')
		with crypto_op_src(src) as (crypto_op_run, dst_path):
			if not opts.stdout:
				with safe_replacement(opts.path) as dst: crypto_op_run(dst)
				os.rename(opts.path, dst_path)
			else: crypto_op_run(sys.stdout)
	else:
		with crypto_op_src() as (crypto_op_run, dst_path): crypto_op_run(sys.stdout)


if __name__ == '__main__': sys.exit(main())
